# -*- coding: utf-8 -*-
"""DM_5_fivernumber_outlier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bo7Cp3WAlhWj-pw7d5vEU1q3-BvyH11J
"""

print("Practical 5")

# lst=[10, 15, 18, 20, 31, 34, 41, 46, 51, 53, 54 ]
# print(lst)

# lst.sort()

# lst

# noOfBins=4
# mul=0

# l=lst[0]
# rng=[]
# mn=lst[0]
# mx=lst[-1]
# w=(mx-mn)//(noOfBins)

# print(mn,mx,w)

# till=noOfBins
# while (till>0):
#   templst=[]
#   templst.append(mn+w*mul)
#   templst.append(mn+w*(mul+1)-1)
#   # rng.append(list(mn+w*mul,mn+w*(mul+1)-1))
#   rng.append(templst)
#   print(till)
#   till=till-1
#   mul=mul+1

# print(rng)

# print(lst)
# for i in lst:
#   bin=1
#   for j in rng:
#     if(i>=j[0]  and i<=j[1]):
#       print("Bin",bin)
#     bin=bin+1

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

file=pd.read_csv("/content/video_data.csv")
df=pd.DataFrame(file)
df

likes=list(df["Likes"])
print(likes)

class Stat:
  def mean(self,lst):
    sum=0
    for i in lst:
      sum+=i
    mean=(sum)/len(lst)
    return mean


  def mod(self,lst):
    dic={}
    for i in lst:
      if(i in dic):
        dic[i]=dic[i]+1
      else:
        dic[i]=1
    # print(dic)
    mxele=next(iter(dic))
    mxfre=dic[mxele]

    for i in dic:
      if(mxfre<dic[i]):
        mxfre=dic[i]
        mxele=i

    # print("Mod of likes is ",mxele," with frequency as ",mxfre)
    return [mxele,mxfre]
  def median(self,lst):
    lst.sort()
    median=0
    if(len(lst)%2):
      median=(lst[len(lst)//2])
    else :
      median=((lst[len(lst)//2] + lst[(len(lst)//2)-1])/2)
    return median

  def range(self,lst):
    return abs(lst[0]-lst[len(lst)-1])

  def fiveNumberSummary(self,lst):
    lst.sort()
    mn=lst[0]
    mx=lst[len(lst)-1]
    half=(len(lst)//2)
    lst1=lst[:half]
    lst2=lst[half:]
    print(lst1,lst2)
    q1=Stat.median(self,lst1)
    q2=Stat.median(self,lst)
    q3=Stat.median(self,lst2)
    print("min, max, Q1, Q2, Q3 : ",mn,mx,q1,q2,q3)

  def ploat(self,lst):
    plt.boxplot(lst)
    fig = plt.figure(figsize =(10, 7))
    plt.show()

  def findSymmetri(self,lst):
    mean=Stat.mean(self,lst)
    mod=Stat.mod(self,lst)[0]
    median=Stat.median(self,lst)
    if(mean==median and median==mod):
      print("Symmetric")
    elif(mean >= median and median>=mod):
      print("Positively Skewed")
    else:
      print("Negatively Skewed")

model=Stat()
print("mean of likes is ",model.mean(likes))
print("median of likes is ",model.median(likes))
print("mode of likes is with element and it's frequency as",model.mod(likes))
print("Range of likes is ",model.range(likes))
model.fiveNumberSummary(likes)
model.ploat(likes)
model.findSymmetri(likes)



# lst=[10,20,30,40,50,60]
# fiveNumberSummary(lst)

q1 = model.median(likes[:(len(likes)//2)])
q3= model.median(likes[(len(likes)//2):])
print(q1,q3)
IQR = q3-q1
print("iqr for given list is ",IQR)
# finding upper and lower whiskers
upper_extream = q3+(1.5*IQR)
lower_extream = q1-(1.5*IQR)
print("upper and lower extream :",upper_extream, lower_extream)

outliers=[]
for i in likes:
  if(i<=lower_extream or i>=upper_extream):
    outliers.append(i)
print('The following are the outliers in the boxplot:{}'.format(outliers))

lst=outliers

print(lst)

lst.sort()

noOfBins=4
mul=0
l=lst[0]
rng=[]
mn=lst[0]
mx=lst[-1]
w=(mx-mn)//(noOfBins)

print(mn,mx,w)

till=noOfBins
while (till>0):
  templst=[]
  templst.append(mn+w*mul)
  templst.append(mn+w*(mul+1)-1)
  # rng.append(list(mn+w*mul,mn+w*(mul+1)-1))
  rng.append(templst)
  print(till)
  till=till-1
  mul=mul+1

print(rng)

print(lst)
dic={}
dic[0]=([1,2])
for i in lst:
  bin=1
  for j in rng:
    if(i>=j[0]  and i<=j[1]):
      # print("Bin",bin)
      if(bin in dic):
        dic[bin].append(i)
      else:
        dic[bin]=[]
        dic[bin].append(i)
      # print(bin,i)
      break
    bin=bin+1

print(dic)

tempdic=dic
for i in dic:
  # print(i)
  # print(dic[i])
  length=len(dic[i])
  print(length)
  templst=[model.mean(dic[i])]*(length)
  dic[i]=templst

print(dic)


dic=tempdic
print(dic)
for i in dic:
  print(i)
  templst=dic[i]
  for j in range(len(templst)):
    if(abs(templst[0]-templst[j]) > abs(templst[-1]-templst[j])):
      templst[j]=templst[-1]
    else:
      templst[j]=templst[0]

















lst=[13, 15, 16, 16, 19, 20, 20, 21, 22, 22, 25, 25, 25, 25, 30, 33, 33, 35, 35, 35, 35, 36, 40, 45, 46, 52, 70]
print(lst)

givenl=25
givner=52

# col_selected=lst
minimun=min(lst)
maximum=max(lst)
print(maximum)
def min_max(v):
  v_new=(v-minimun)/(maximum-minimun)
  return v_new
for i in lst:
  print(min_max(i))

mean_value=35
std_value=12.94
def z_score(v):
  v_new=(v-mean_value)/std_value
  return v_new
for i in lst:
  print(z_score(i))

max_abs_value = abs(max(lst))
power = len(str(int(max_abs_value)))
print(power)
def decimal_scaling(x):
  x_new=x/(10 ** power)
  return x_new
for i in lst:
  print(decimal_scaling(i))





